; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\i2c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\i2c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user\inc -I.\RTE\Device\STM32F103C8 -I.\RTE\_Target_1 -IC:\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=535 -D_RTE_ -DSTM32F10X_MD -D_RTE_ --omf_browse=.\objects\i2c.crf user\src\i2c.c]
                          THUMB

                          AREA ||i.I2C_Init||, CODE, READONLY, ALIGN=2

                  I2C_Init PROC
;;;7      
;;;8      void I2C_Init(void)
000000  4828              LDR      r0,|L1.164|
;;;9      {
;;;10     		RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN; // GPIOB и AFIO
000002  6980              LDR      r0,[r0,#0x18]
000004  f0400009          ORR      r0,r0,#9
000008  4926              LDR      r1,|L1.164|
00000a  6188              STR      r0,[r1,#0x18]
;;;11     
;;;12     		// Ќастройка PB8 (SCL) и PB9 (SDA) в альтернативном режиме с открытым стоком
;;;13     		AFIO->MAPR |= AFIO_MAPR_I2C1_REMAP;// –емаппинг I2C1 на PB8 и PB9
00000c  4826              LDR      r0,|L1.168|
00000e  6840              LDR      r0,[r0,#4]
000010  f0400002          ORR      r0,r0,#2
000014  4924              LDR      r1,|L1.168|
000016  6048              STR      r0,[r1,#4]
;;;14     		GPIOB->CRH &= ~(GPIO_CRH_CNF8 | GPIO_CRH_MODE8 | GPIO_CRH_CNF9 | GPIO_CRH_MODE9); // —брос
000018  4824              LDR      r0,|L1.172|
00001a  6800              LDR      r0,[r0,#0]
00001c  f02000ff          BIC      r0,r0,#0xff
000020  4922              LDR      r1,|L1.172|
000022  6008              STR      r0,[r1,#0]
;;;15     		GPIOB->CRH |= GPIO_CRH_CNF8_1 | GPIO_CRH_CNF9_1 |GPIO_CRH_CNF8_0 | GPIO_CRH_CNF9_0; // јльтернативна€ функци€ с открытым стоком
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f04000cc          ORR      r0,r0,#0xcc
00002c  6008              STR      r0,[r1,#0]
;;;16     		GPIOB->CRH |= GPIO_CRH_MODE8_0 | GPIO_CRH_MODE9_0 |GPIO_CRH_MODE8_1 | GPIO_CRH_MODE9_1; // –ежим вывода, 50 ћ√ц
00002e  4608              MOV      r0,r1
000030  6800              LDR      r0,[r0,#0]
000032  f0400033          ORR      r0,r0,#0x33
000036  6008              STR      r0,[r1,#0]
;;;17         RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; // I2C1
000038  481a              LDR      r0,|L1.164|
00003a  69c0              LDR      r0,[r0,#0x1c]
00003c  f4401000          ORR      r0,r0,#0x200000
000040  4918              LDR      r1,|L1.164|
000042  61c8              STR      r0,[r1,#0x1c]
;;;18     
;;;19     		I2C1->OAR2 &=~ I2C_OAR2_ENDUAL; //Disable  acknowledge on Own Address2 match address
000044  481a              LDR      r0,|L1.176|
000046  8800              LDRH     r0,[r0,#0]
000048  f0200001          BIC      r0,r0,#1
00004c  4918              LDR      r1,|L1.176|
00004e  8008              STRH     r0,[r1,#0]
;;;20     		I2C1->CR1 &=~ I2C_CR1_ENGC; //Disable General Call
000050  4817              LDR      r0,|L1.176|
000052  380c              SUBS     r0,r0,#0xc
000054  8800              LDRH     r0,[r0,#0]
000056  f0200040          BIC      r0,r0,#0x40
00005a  4915              LDR      r1,|L1.176|
00005c  390c              SUBS     r1,r1,#0xc
00005e  8008              STRH     r0,[r1,#0]
;;;21     		I2C1->CR1 &=~ I2C_CR1_NOSTRETCH; //Enable Clock stretching
000060  4608              MOV      r0,r1
000062  8800              LDRH     r0,[r0,#0]
000064  f0200080          BIC      r0,r0,#0x80
000068  8008              STRH     r0,[r1,#0]
;;;22     		
;;;23     		I2C1->CR1 &=~ I2C_CR1_PE;// ќтключаем I2C перед настройкой
00006a  4608              MOV      r0,r1
00006c  8800              LDRH     r0,[r0,#0]
00006e  f0200001          BIC      r0,r0,#1
000072  8008              STRH     r0,[r1,#0]
;;;24     		I2C1->CR2 = 36; // ”станавливаем частоту APB1 (36 ћ√ц)
000074  2024              MOVS     r0,#0x24
000076  1d09              ADDS     r1,r1,#4
000078  8008              STRH     r0,[r1,#0]
;;;25     		I2C1->TRISE = 37; //// TRISE = 37 (1000 нс) - но APB1 у STM32F103 делитс€ на 2, поэтому частота APB1 здесь 36 ћ√ц. ≈сли стандартное врем€ нарастани€ дл€ I2C в стандартном режиме (100 к√ц) составл€ет 1000 нс, то подставл€ем в формулу: (36 * 1000) / 1000 + 1 = 36 + 1 = 37. ќтсюда значение 37.
00007a  2025              MOVS     r0,#0x25
00007c  490c              LDR      r1,|L1.176|
00007e  3114              ADDS     r1,r1,#0x14
000080  8008              STRH     r0,[r1,#0]
;;;26     		I2C1->CCR = 180; // CCR = 180 (SCL = 100 к√ц)
000082  20b4              MOVS     r0,#0xb4
000084  1f09              SUBS     r1,r1,#4
000086  8008              STRH     r0,[r1,#0]
;;;27     
;;;28     	  I2C1->CR1 = I2C_CR1_PE; // ¬ключаем I2C 
000088  2001              MOVS     r0,#1
00008a  4909              LDR      r1,|L1.176|
00008c  390c              SUBS     r1,r1,#0xc
00008e  8008              STRH     r0,[r1,#0]
;;;29         I2C1->CR1 |= I2C_CR1_ACK; //TypeAcknowledge
000090  4608              MOV      r0,r1
000092  8800              LDRH     r0,[r0,#0]
000094  f4406080          ORR      r0,r0,#0x400
000098  8008              STRH     r0,[r1,#0]
;;;30     		I2C1->OAR2 = I2C_OAR2_ADD2;
00009a  20fe              MOVS     r0,#0xfe
00009c  4904              LDR      r1,|L1.176|
00009e  8008              STRH     r0,[r1,#0]
;;;31     }
0000a0  4770              BX       lr
;;;32     //----------------------------------------------------------
                          ENDP

0000a2  0000              DCW      0x0000
                  |L1.164|
                          DCD      0x40021000
                  |L1.168|
                          DCD      0x40010000
                  |L1.172|
                          DCD      0x40010c04
                  |L1.176|
                          DCD      0x4000540c

                          AREA ||i.I2C_SendByteByADDR||, CODE, READONLY, ALIGN=1

                  I2C_SendByteByADDR PROC
;;;33     
;;;34     void I2C_SendByteByADDR(I2C_TypeDef * i2c, uint8_t c,uint8_t addr)
000000  8803              LDRH     r3,[r0,#0]
;;;35     {
;;;36       //Disable Pos
;;;37       CLEAR_BIT(i2c->CR1, I2C_CR1_POS);
000002  f4236300          BIC      r3,r3,#0x800
000006  8003              STRH     r3,[r0,#0]
;;;38       MODIFY_REG(i2c->CR1, I2C_CR1_ACK, I2C_CR1_ACK);
000008  8803              LDRH     r3,[r0,#0]
00000a  f4436380          ORR      r3,r3,#0x400
00000e  8003              STRH     r3,[r0,#0]
;;;39       SET_BIT(i2c->CR1, I2C_CR1_START);
000010  8803              LDRH     r3,[r0,#0]
000012  f4437380          ORR      r3,r3,#0x100
000016  8003              STRH     r3,[r0,#0]
;;;40       while (!READ_BIT(i2c->SR1, I2C_SR1_SB)){};            
000018  bf00              NOP      
                  |L2.26|
00001a  8a83              LDRH     r3,[r0,#0x14]
00001c  f0030301          AND      r3,r3,#1
000020  2b00              CMP      r3,#0
000022  d0fa              BEQ      |L2.26|
;;;41       (void) i2c->SR1;
000024  8a83              LDRH     r3,[r0,#0x14]
;;;42       //I2C_Write_Byte(addr);
;;;43       MODIFY_REG(i2c->DR, I2C_DR_DR, addr | I2C_REQUEST_WRITE);
000026  8a03              LDRH     r3,[r0,#0x10]
000028  f02303ff          BIC      r3,r3,#0xff
00002c  4313              ORRS     r3,r3,r2
00002e  8203              STRH     r3,[r0,#0x10]
;;;44       while (!READ_BIT(i2c->SR1, I2C_SR1_ADDR)){};
000030  bf00              NOP      
                  |L2.50|
000032  8a83              LDRH     r3,[r0,#0x14]
000034  f0030302          AND      r3,r3,#2
000038  2b00              CMP      r3,#0
00003a  d0fa              BEQ      |L2.50|
;;;45       (void) i2c->SR1;
00003c  8a83              LDRH     r3,[r0,#0x14]
;;;46       (void) i2c->SR2;
00003e  8b03              LDRH     r3,[r0,#0x18]
;;;47       //I2C_Write_Byte(c);
;;;48       MODIFY_REG(i2c->DR, I2C_DR_DR,c);
000040  8a03              LDRH     r3,[r0,#0x10]
000042  f02303ff          BIC      r3,r3,#0xff
000046  430b              ORRS     r3,r3,r1
000048  8203              STRH     r3,[r0,#0x10]
;;;49       while (!READ_BIT(i2c->SR1, I2C_SR1_TXE)){};
00004a  bf00              NOP      
                  |L2.76|
00004c  8a83              LDRH     r3,[r0,#0x14]
00004e  f0030380          AND      r3,r3,#0x80
000052  2b00              CMP      r3,#0
000054  d0fa              BEQ      |L2.76|
;;;50       //I2C_StopCondition();
;;;51       SET_BIT(i2c->CR1, I2C_CR1_STOP);
000056  8803              LDRH     r3,[r0,#0]
000058  f4437300          ORR      r3,r3,#0x200
00005c  8003              STRH     r3,[r0,#0]
;;;52     }
00005e  4770              BX       lr
                          ENDP


;*** Start embedded assembler ***

#line 1 "user\\src\\i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Init____REV16|
#line 208 "C:\\Arm\\Packs\\ARM\\CMSIS\\5.8.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___5_i2c_c_I2C_Init____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Init____REVSH|
#line 223
|__asm___5_i2c_c_I2C_Init____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_i2c_c_I2C_Init____RRX|
#line 410
|__asm___5_i2c_c_I2C_Init____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
