; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\lcd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\user\inc -I.\RTE\Device\STM32F103C8 -I.\RTE\_Target_1 -IC:\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Arm\Packs\Keil\STM32F1xx_DFP\2.4.0\Device\Include -D__UVISION_VERSION=535 -D_RTE_ -DSTM32F10X_MD -D_RTE_ --omf_browse=.\objects\lcd.crf user\src\lcd.c]
                          THUMB

                          AREA ||i.DelayMicro||, CODE, READONLY, ALIGN=2

                  DelayMicro PROC
;;;9      //------------------------------------------------
;;;10     __STATIC_INLINE void DelayMicro(__IO uint32_t micros)
000000  b501              PUSH     {r0,lr}
;;;11     {
;;;12     	micros *=(SystemCoreClock / 1000000) / 9;
000002  4809              LDR      r0,|L1.40|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  4909              LDR      r1,|L1.44|
000008  fbb0f0f1          UDIV     r0,r0,r1
00000c  2109              MOVS     r1,#9
00000e  fbb0f0f1          UDIV     r0,r0,r1
000012  9900              LDR      r1,[sp,#0]
000014  4348              MULS     r0,r1,r0
000016  9000              STR      r0,[sp,#0]
;;;13     	while (micros--);
000018  bf00              NOP      
                  |L1.26|
00001a  9800              LDR      r0,[sp,#0]
00001c  1e41              SUBS     r1,r0,#1
00001e  9100              STR      r1,[sp,#0]
000020  2800              CMP      r0,#0
000022  d1fa              BNE      |L1.26|
;;;14     }
000024  bd08              POP      {r3,pc}
;;;15     //------------------------------------------------
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      SystemCoreClock
                  |L1.44|
                          DCD      0x000f4240

                          AREA ||i.LCD_Clear||, CODE, READONLY, ALIGN=1

                  LCD_Clear PROC
;;;44     //------------------------------------------------
;;;45     void LCD_Clear(void)
000000  b510              PUSH     {r4,lr}
;;;46     {
;;;47     	sendbyte(0x01,0);
000002  2100              MOVS     r1,#0
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       sendbyte
;;;48     	delay_ms(2);
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       delay_ms
;;;49     }
000010  bd10              POP      {r4,pc}
;;;50     //------------------------------------------------
                          ENDP


                          AREA ||i.LCD_SendChar||, CODE, READONLY, ALIGN=1

                  LCD_SendChar PROC
;;;50     //------------------------------------------------
;;;51     void LCD_SendChar(char ch)
000000  b510              PUSH     {r4,lr}
;;;52     {
000002  4604              MOV      r4,r0
;;;53     	sendbyte(ch,1);
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       sendbyte
;;;54     }
00000c  bd10              POP      {r4,pc}
;;;55     //------------------------------------------------
                          ENDP


                          AREA ||i.LCD_SetPos||, CODE, READONLY, ALIGN=1

                  LCD_SetPos PROC
;;;65     //------------------------------------------------
;;;66     void LCD_SetPos(uint8_t x, uint8_t y)
000000  b570              PUSH     {r4-r6,lr}
;;;67     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;68     	switch(y)
000006  b115              CBZ      r5,|L4.14|
000008  2d01              CMP      r5,#1
00000a  d10f              BNE      |L4.44|
00000c  e005              B        |L4.26|
                  |L4.14|
;;;69     	{
;;;70     		case 0:
;;;71     			sendbyte(x|0x80,0);
00000e  f0440080          ORR      r0,r4,#0x80
000012  2100              MOVS     r1,#0
000014  f7fffffe          BL       sendbyte
;;;72     			break;
000018  e008              B        |L4.44|
                  |L4.26|
;;;73     		case 1:
;;;74     			sendbyte((0x35+x)|0x80,0);
00001a  f1040135          ADD      r1,r4,#0x35
00001e  b2c9              UXTB     r1,r1
000020  f0410080          ORR      r0,r1,#0x80
000024  2100              MOVS     r1,#0
000026  f7fffffe          BL       sendbyte
;;;75     			break;
00002a  bf00              NOP      
                  |L4.44|
00002c  bf00              NOP                            ;72
;;;76     	}
;;;77     }
00002e  bd70              POP      {r4-r6,pc}
;;;78     //------------------------------------------------
                          ENDP


                          AREA ||i.LCD_String||, CODE, READONLY, ALIGN=1

                  LCD_String PROC
;;;55     //------------------------------------------------
;;;56     void LCD_String(char* st)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58     	uint8_t i=0;
000004  2500              MOVS     r5,#0
;;;59     	while(st[i]!=0)
000006  e005              B        |L5.20|
                  |L5.8|
;;;60     	{
;;;61     		sendbyte(st[i],1);
000008  5d60              LDRB     r0,[r4,r5]
00000a  2101              MOVS     r1,#1
00000c  f7fffffe          BL       sendbyte
;;;62     		i++;
000010  1c68              ADDS     r0,r5,#1
000012  b2c5              UXTB     r5,r0
                  |L5.20|
000014  5d60              LDRB     r0,[r4,r5]            ;59
000016  2800              CMP      r0,#0                 ;59
000018  d1f6              BNE      |L5.8|
;;;63     	}
;;;64     }
00001a  bd70              POP      {r4-r6,pc}
;;;65     //------------------------------------------------
                          ENDP


                          AREA ||i.LCD_WriteByteI2CLCD||, CODE, READONLY, ALIGN=2

                  LCD_WriteByteI2CLCD PROC
;;;21     //------------------------------------------------
;;;22     void LCD_WriteByteI2CLCD(uint8_t bt)
000000  b510              PUSH     {r4,lr}
;;;23     {
000002  4604              MOV      r4,r0
;;;24       I2C_SendByteByADDR(I2C1, bt,0x4E);
000004  224e              MOVS     r2,#0x4e
000006  4621              MOV      r1,r4
000008  4801              LDR      r0,|L6.16|
00000a  f7fffffe          BL       I2C_SendByteByADDR
;;;25     }
00000e  bd10              POP      {r4,pc}
;;;26     //------------------------------------------------
                          ENDP

                  |L6.16|
                          DCD      0x40005400

                          AREA ||i.LCD_ini||, CODE, READONLY, ALIGN=2

                  LCD_ini PROC
;;;78     //------------------------------------------------
;;;79     void LCD_ini(void)
000000  b510              PUSH     {r4,lr}
;;;80     {
;;;81       delay_ms(50);
000002  2032              MOVS     r0,#0x32
000004  f7fffffe          BL       delay_ms
;;;82       LCD_WriteByteI2CLCD(0);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       LCD_WriteByteI2CLCD
;;;83       setwrite();//запись
00000e  4928              LDR      r1,|L7.176|
000010  7809              LDRB     r1,[r1,#0]  ; portlcd
000012  f0210102          BIC      r1,r1,#2
000016  4a26              LDR      r2,|L7.176|
000018  7011              STRB     r1,[r2,#0]
00001a  4608              MOV      r0,r1
00001c  f7fffffe          BL       LCD_WriteByteI2CLCD
;;;84       delay_ms(100);
000020  2064              MOVS     r0,#0x64
000022  f7fffffe          BL       delay_ms
;;;85       sendhalfbyte(0x03);
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       sendhalfbyte
;;;86       DelayMicro(4500);
00002c  f2411094          MOV      r0,#0x1194
000030  f7fffffe          BL       DelayMicro
;;;87       sendhalfbyte(0x03);
000034  2003              MOVS     r0,#3
000036  f7fffffe          BL       sendhalfbyte
;;;88       DelayMicro(4500);
00003a  f2411094          MOV      r0,#0x1194
00003e  f7fffffe          BL       DelayMicro
;;;89       sendhalfbyte(0x03);
000042  2003              MOVS     r0,#3
000044  f7fffffe          BL       sendhalfbyte
;;;90       DelayMicro(200);
000048  20c8              MOVS     r0,#0xc8
00004a  f7fffffe          BL       DelayMicro
;;;91       sendhalfbyte(0x02);
00004e  2002              MOVS     r0,#2
000050  f7fffffe          BL       sendhalfbyte
;;;92       sendbyte(0x28,0);//режим 4 бит, 2 линии (для нашего большого дисплея это 4 линии, шрифт 5х8
000054  2100              MOVS     r1,#0
000056  2028              MOVS     r0,#0x28
000058  f7fffffe          BL       sendbyte
;;;93       sendbyte(0x08,0);//дисплей пока выключаем
00005c  2100              MOVS     r1,#0
00005e  2008              MOVS     r0,#8
000060  f7fffffe          BL       sendbyte
;;;94       delay_ms(1);
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       delay_ms
;;;95       sendbyte(0x01,0);// уберем мусор
00006a  2100              MOVS     r1,#0
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       sendbyte
;;;96       delay_ms(2);
000072  2002              MOVS     r0,#2
000074  f7fffffe          BL       delay_ms
;;;97       sendbyte(0x06,0);// пишем влево
000078  2100              MOVS     r1,#0
00007a  2006              MOVS     r0,#6
00007c  f7fffffe          BL       sendbyte
;;;98       delay_ms(1);
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       delay_ms
;;;99       sendbyte(0x0C,0);//дисплей включаем (D=1), курсоры никакие не нужны
000086  2100              MOVS     r1,#0
000088  200c              MOVS     r0,#0xc
00008a  f7fffffe          BL       sendbyte
;;;100      sendbyte(0x02,0);//курсор на место
00008e  2100              MOVS     r1,#0
000090  2002              MOVS     r0,#2
000092  f7fffffe          BL       sendbyte
;;;101      delay_ms(2);
000096  2002              MOVS     r0,#2
000098  f7fffffe          BL       delay_ms
;;;102      setled();//подсветка
00009c  4904              LDR      r1,|L7.176|
00009e  7809              LDRB     r1,[r1,#0]  ; portlcd
0000a0  f0410108          ORR      r1,r1,#8
0000a4  4a02              LDR      r2,|L7.176|
0000a6  7011              STRB     r1,[r2,#0]
0000a8  4608              MOV      r0,r1
0000aa  f7fffffe          BL       LCD_WriteByteI2CLCD
;;;103    }
0000ae  bd10              POP      {r4,pc}
;;;104    
                          ENDP

                  |L7.176|
                          DCD      portlcd

                          AREA ||i.sendbyte||, CODE, READONLY, ALIGN=2

                  sendbyte PROC
;;;35     //------------------------------------------------
;;;36     void sendbyte(uint8_t c, uint8_t mode)
000000  b570              PUSH     {r4-r6,lr}
;;;37     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;38     	if(mode==0) rs_reset();
000006  b94d              CBNZ     r5,|L8.28|
000008  490d              LDR      r1,|L8.64|
00000a  7809              LDRB     r1,[r1,#0]  ; portlcd
00000c  f0210101          BIC      r1,r1,#1
000010  4a0b              LDR      r2,|L8.64|
000012  7011              STRB     r1,[r2,#0]
000014  4608              MOV      r0,r1
000016  f7fffffe          BL       LCD_WriteByteI2CLCD
00001a  e008              B        |L8.46|
                  |L8.28|
;;;39     	else rs_set();
00001c  4908              LDR      r1,|L8.64|
00001e  7809              LDRB     r1,[r1,#0]  ; portlcd
000020  f0410101          ORR      r1,r1,#1
000024  4a06              LDR      r2,|L8.64|
000026  7011              STRB     r1,[r2,#0]
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       LCD_WriteByteI2CLCD
                  |L8.46|
;;;40     	uint8_t hc=0;
00002e  2600              MOVS     r6,#0
;;;41     	hc=c>>4;
000030  1126              ASRS     r6,r4,#4
;;;42     	sendhalfbyte(hc);sendhalfbyte(c);
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       sendhalfbyte
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       sendhalfbyte
;;;43     }
00003e  bd70              POP      {r4-r6,pc}
;;;44     //------------------------------------------------
                          ENDP

                  |L8.64|
                          DCD      portlcd

                          AREA ||i.sendhalfbyte||, CODE, READONLY, ALIGN=2

                  sendhalfbyte PROC
;;;26     //------------------------------------------------
;;;27     void sendhalfbyte(uint8_t c)
000000  b538              PUSH     {r3-r5,lr}
;;;28     {
000002  4604              MOV      r4,r0
;;;29       c<<=4;
000004  0720              LSLS     r0,r4,#28
000006  0e04              LSRS     r4,r0,#24
;;;30       LCD_WriteByteI2CLCD(portlcd|c);
000008  4918              LDR      r1,|L9.108|
00000a  7809              LDRB     r1,[r1,#0]  ; portlcd
00000c  ea410004          ORR      r0,r1,r4
000010  f7fffffe          BL       LCD_WriteByteI2CLCD
;;;31       LCD_WriteByteI2CLCD((portlcd|=0x04)|c);
000014  4915              LDR      r1,|L9.108|
000016  7809              LDRB     r1,[r1,#0]  ; portlcd
000018  f0410104          ORR      r1,r1,#4
00001c  4a13              LDR      r2,|L9.108|
00001e  7011              STRB     r1,[r2,#0]
000020  ea410004          ORR      r0,r1,r4
000024  f7fffffe          BL       LCD_WriteByteI2CLCD
;;;32       DelayNano(200);
000028  20c8              MOVS     r0,#0xc8
00002a  9000              STR      r0,[sp,#0]
00002c  4810              LDR      r0,|L9.112|
00002e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000030  4910              LDR      r1,|L9.116|
000032  fbb0f0f1          UDIV     r0,r0,r1
000036  9900              LDR      r1,[sp,#0]
000038  4348              MULS     r0,r1,r0
00003a  f2423128          MOV      r1,#0x2328
00003e  fbb0f0f1          UDIV     r0,r0,r1
000042  9000              STR      r0,[sp,#0]
000044  bf00              NOP      
000046  bf00              NOP      
                  |L9.72|
000048  9800              LDR      r0,[sp,#0]
00004a  1e41              SUBS     r1,r0,#1
00004c  9100              STR      r1,[sp,#0]
00004e  2800              CMP      r0,#0
000050  d1fa              BNE      |L9.72|
000052  bf00              NOP      
;;;33       LCD_WriteByteI2CLCD((portlcd&=~0x04)|c);
000054  4905              LDR      r1,|L9.108|
000056  7809              LDRB     r1,[r1,#0]  ; portlcd
000058  f0210104          BIC      r1,r1,#4
00005c  4a03              LDR      r2,|L9.108|
00005e  7011              STRB     r1,[r2,#0]
000060  ea410004          ORR      r0,r1,r4
000064  f7fffffe          BL       LCD_WriteByteI2CLCD
;;;34     }
000068  bd38              POP      {r3-r5,pc}
;;;35     //------------------------------------------------
                          ENDP

00006a  0000              DCW      0x0000
                  |L9.108|
                          DCD      portlcd
                  |L9.112|
                          DCD      SystemCoreClock
                  |L9.116|
                          DCD      0x000f4240

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  str1
                          %        100

                          AREA ||.data||, DATA, ALIGN=0

                  buf
000000  00                DCB      0x00
                  portlcd
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "user\\src\\lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_buf____REV16|
#line 208 "C:\\Arm\\Packs\\ARM\\CMSIS\\5.8.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___5_lcd_c_buf____REV16| PROC
#line 209

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_buf____REVSH|
#line 223
|__asm___5_lcd_c_buf____REVSH| PROC
#line 224

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_lcd_c_buf____RRX|
#line 410
|__asm___5_lcd_c_buf____RRX| PROC
#line 411

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
